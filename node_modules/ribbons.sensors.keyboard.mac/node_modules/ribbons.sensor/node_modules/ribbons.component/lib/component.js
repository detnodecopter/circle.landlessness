var util = require('util');
var EventEmitter = require('events').EventEmitter;

var Logger = require('ribbons.logger');

function Component (options) {
  EventEmitter.call(this);
  options = options || {};
  this.name = options.name || 'component';
  this.debug = options.debug || true;
  this.logger = options.logger || new Logger({name: this.name, debug: this.debug});
  this.platform = options.platform || undefined;
}
util.inherits(Component, EventEmitter);

Component.prototype.setPlatform = function (platform) {
  if (platform === undefined) {
    this.error('platform is undefined.');
    throw new Error('platform for ' + this.name + ' is undefined.');
  } else {
    this.platform = platform;
    this.info('platform set to', this.platform.name || util.inspect(this.platform));
  }
}

Component.prototype.getPlatform = function() {
  return this.platform;
}

Component.prototype.info = function() {
  this.logger.info.apply(this,arguments);
}

Component.prototype.log = function() {
  this.logger.info.apply(this,arguments);
}

Component.prototype.warn = function() {
  this.logger.warn.apply(this,arguments);
}

Component.prototype.error = function() {
  this.logger.error.apply(this,arguments);
}

Component.prototype.init = function () {}
Component.prototype.start = function () {}

module.exports = Component;
